#1. Generic Programming:
	1.1 Templates.
	1.2 decltype
	1.3 declval
	
	
#2. SMART pointers.
	1.1 enable_shared_from_this




The Use of Operator -> along with decltype.

1. decltype is a function which tells the type of an expression. By nature of the definition an expression is a cycilc.
   Anything in an language other than it's keywords could be states as an expression.
   
2. The -> Operator is mostly associated with Pointer to an object type. Where -> helps us to access any member function or variable ( Given public/protected). But following is another usage of -> operator.

	auto is a very useful thing in C++. In a given piece of code we do not need to know all the types from the interface. It we
	know, what could be done by that interface. Like
	
	for (const auto& elem : vec) {
		// Do something.
	}
	
	for (const auto& elem : my_map) {
		// Do something like elem.first / elem.second // Because we know that the elem in map has key and value.
	}
	
	Doing his helps us abstracting the return type of the interfaces. Mostly in these cases an Interface1 returns an Object of
	type T1 and then we go on calling some interface Interface2 which understand T1 and knows how to work with it.
	Hence in between code which does not need to know the exact type of T1 can work using auto and passing it across various interfaces and doing the work accordingly.
	
	Hence for variables it is convenience point to use auto.
	
	Now what about functions.
	
	As C++ uses C type (read Unix type) linkers and loaders, hence the semantic for an function is already defined.
	
	In a function we need to know the variables (it could be var-args as well). and mostly the return type.
	
	With auto kind of return type is not valid for function.
	
	
	Hence to use the similar kind of convenience, for function to use auto following is done.
	
	
	auto 
	func1(args...) -> decltype(expression(which determines what type of object will be returned))
	{
	}
	
	The facinating part is as the decltype part which comes after "->", can use the arguments which are sent to func1. Because the function arguments are already parsed and known to the lexical parsers and symbol table when the expression for decltype is met.
	
	This is to done so that for an interface and the return type can also be abstracted.






Enable_shared_from_this.


shared_ptr gets created once. And then as the name suggests it gets shared. And sometimes the ownership of it gets "moved"
But it is not possible to create shared_ptr from same object multiple times, unless you specifically allow the object to do so.

Meaning.. The way shared_ptr gets created is following

	std::shared_ptr<some_class> some_class_obj = make_shared<some_class>(); // this is calling some_class's ctor.
	
	/* Now we can have */ auto some_class_obj_2 = some_class_obj; // In this case there would be refcount of 2 in the same object.
	
	Hence the meaning of the shared_ptr is to create once and then it can be used by sharing it or moving it to a new owner.
	
	Now let's take an example where, we want to create an object and then want to create shared_ptr from it and may be send it
	across multiple interfaces.

Continuing with the above example, 

class some_class {
	public:
		// somthigns...
		std::shared_ptr<some_class> get_shared(void) { return std::make_shared<some_class>(this) };
	private:
		// Some otherthins.
};

In the above class we can get a shared_ptr to the objects via calling get_shared(). Doing that following problem arise.


 {
  //... some code.
  std::shared_ptr<some_class> obj1 = std::make_shared<some_class>(); // First object. ownership with obj1.
  
  { // Another scope started.
    auto obj2 = obj1->get_shared(); // Now as we are creating a new shared_ptr from this, it is a new shared_ptr
									// And the refcount of it is 1.
  }
    // dtor will be called for some_class;
 }
 
 The problem is when you want to create an object and later point in time you want to create a seperate ( not by copying a already created one) shared_ptr from it. Each time you create shared_ptr directly from this. this ptr does not know about already created shared_ptr, hence each time it will create a new one with ref-count as 1.
 
 That is bad because if any of the newly created shared_ptr goes out of scope it will call dtor. And delete the object.
 
 
 Hence following method is employed.
 
 
 class some_class : public enable_shared_from_this<some_class> {
	public:
		// some_code.
		std::shared_ptr<some_class> get_shared(void) { return shared_from_this(); }
 };
 
 Here we are inheriting enable_shared_from_this class which actually tracks the ownership and if any shared_ptr created for a given object (because parent class object tracks that). And each time you call get_shared(), it will not return a new shared_ptr instead one shared_ptr with refcount incremented.
 
 Now all that can also be done by keeping a shared_ptr as a private variable inside the class itself. [ Need to seach why not ??]
